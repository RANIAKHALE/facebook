//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Facebook_Project.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class AccountDatabaseEntities : DbContext
    {
        public AccountDatabaseEntities() : base("fasebookdb")
        {
        }
        public DbSet<userinfo> userinfos { get; set; }
        public DbSet<post> posts { get; set; }
        public DbSet<comments> comments { get; set; }
        public DbSet<reacts> reacts { get; set; }
        public DbSet<friends> friends { get; set; }
        public DbSet<friendRequstes> friendRequstes { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            /*  
             *  modelBuilder.Entity<post>()
                  .HasMany(d => d.comments)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<post>()
                  .HasMany(d => d.reacts)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.posts)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.Comments)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.friendRequstes)
                  .WithOptional(u => u.userinfo)
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.friends)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.friendRequstes)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.friendRequstes)
                  .WithOptional()
                  .WillCascadeOnDelete(true);

              modelBuilder.Entity<userinfo>()
                  .HasMany(d => d.Reacts)
                  .WithOptional()
                  .WillCascadeOnDelete(true);
            */
        }
    }

}
